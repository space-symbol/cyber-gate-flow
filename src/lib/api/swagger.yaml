openapi: 3.0.3
info:
  title: VPN Bot API
  description: |
    REST API для сервиса VPN Bot. Предоставляет функциональность для:
    - Аутентификации пользователей
    - Управления устройствами VPN
    - Обработки платежей
    - Интеграции с Telegram ботом
    
    ## Основные возможности
    - Регистрация и вход пользователей с поддержкой MFA
    - Создание и управление VPN устройствами
    - Интеграция с платежной системой Робокасса
    - Отслеживание IP адресов для безопасности
    - Управление подписками на устройства
    
    ## Безопасность
    - JWT токены для аутентификации
    - Поддержка двухфакторной аутентификации (TOTP)
    - Валидация IP адресов
    - HTTPS обязателен в продакшене
  version: 1.0.0
  contact:
    name: VPN Bot Support
    email: support@vpnbot.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.vpnbot.com
    description: Production server

tags:
  - name: Authentication
    description: Операции аутентификации и регистрации пользователей
  - name: User
    description: Управление профилем пользователя
  - name: Devices
    description: Управление VPN устройствами
  - name: Payments
    description: Операции с платежами и подписками
  - name: Webhooks
    description: Webhook эндпоинты для внешних сервисов

paths:
  /api/v1/auth/login:
    post:
      tags:
        - Authentication
      summary: Вход пользователя
      description: |
        Аутентификация пользователя по email и паролю.
        Если у пользователя включена MFA, требуется передать OTP токен.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              basic:
                summary: Базовый вход
                value:
                  email: "user@example.com"
                  pass: "password123"
              withMFA:
                summary: Вход с MFA
                value:
                  email: "user@example.com"
                  pass: "password123"
                  otp: "123456"
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                success:
                  summary: Успешный вход
                  value:
                    token: "token_123_1234567890"
                    user:
                      id: 123
                      email: "user@example.com"
                      telegram_id: 456789
                      telegram_username: "username"
                      ip_address: "192.168.1.1"
                      created_at: "2024-01-01T00:00:00Z"
                    expires_at: "2024-01-01T01:00:00Z"
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidFormat:
                  summary: Неверный формат запроса
                  value:
                    error: "Invalid request format"
                    code: "INVALID_REQUEST"
                otpRequired:
                  summary: Требуется OTP
                  value:
                    error: "OTP required"
                    code: "OTP_REQUIRED"
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidCredentials:
                  summary: Неверные учетные данные
                  value:
                    error: "Invalid credentials"
                    code: "INVALID_CREDENTIALS"
                invalidOTP:
                  summary: Неверный OTP
                  value:
                    error: "Invalid OTP"
                    code: "INVALID_OTP"

  /api/v1/auth/register:
    post:
      tags:
        - Authentication
      summary: Регистрация пользователя
      description: |
        Создание нового пользователя с email и паролем.
        Автоматически генерируется MFA секрет и QR код для настройки.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              newUser:
                summary: Новый пользователь
                value:
                  email: "newuser@example.com"
                  pass: "password123"
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
              examples:
                created:
                  summary: Пользователь создан
                  value:
                    user:
                      id: 124
                      email: "newuser@example.com"
                      created_at: "2024-01-01T00:00:00Z"
                    mfa_secret: "JBSWY3DPEHPK3PXP"
                    qr_url: "otpauth://totp/VPNService:newuser@example.com?secret=JBSWY3DPEHPK3PXP&issuer=VPNService"
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                shortPassword:
                  summary: Короткий пароль
                  value:
                    error: "Password too short"
                    code: "INVALID_REQUEST"
                userExists:
                  summary: Пользователь уже существует
                  value:
                    error: "User already exists"
                    code: "USER_CREATION_ERROR"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/user/profile:
    get:
      tags:
        - User
      summary: Получить профиль пользователя
      description: Получение информации о текущем аутентифицированном пользователе
      operationId: getUserProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Профиль пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
              examples:
                profile:
                  summary: Профиль пользователя
                  value:
                    id: 123
                    email: "user@example.com"
                    telegram_id: 456789
                    telegram_username: "username"
                    ip_address: "192.168.1.1"
                    created_at: "2024-01-01T00:00:00Z"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/devices:
    get:
      tags:
        - Devices
      summary: Список устройств пользователя
      description: Получение списка всех VPN устройств текущего пользователя
      operationId: listDevices
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список устройств
          content:
            application/json:
              schema:
                type: object
                properties:
                  devices:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeviceInfo'
              examples:
                devices:
                  summary: Список устройств
                  value:
                    devices:
                      - id: 1
                        name: "Device 01-02 15:04"
                        status: "active"
                        access_url: "ss://..."
                        created_at: "2024-01-01T00:00:00Z"
                        subscription:
                          id: 1
                          expires_at: "2024-02-01T00:00:00Z"
                          status: "active"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Devices
      summary: Добавить новое устройство
      description: Создание нового VPN устройства для текущего пользователя
      operationId: addDevice
      security:
        - BearerAuth: []
      responses:
        '201':
          description: Устройство создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDeviceResponse'
              examples:
                created:
                  summary: Устройство создано
                  value:
                    device:
                      id: 2
                      name: "Device 01-02 15:05"
                      status: "active"
                      access_url: "ss://..."
                      created_at: "2024-01-01T00:01:00Z"
                    subscription:
                      id: 2
                      expires_at: "2024-02-01T00:01:00Z"
                      status: "active"
        '400':
          description: Ошибка создания устройства
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                limitReached:
                  summary: Достигнут лимит устройств
                  value:
                    error: "достигнут лимит устройств"
                    code: "ADD_DEVICE_ERROR"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/devices/{id}:
    get:
      tags:
        - Devices
      summary: Получить информацию об устройстве
      description: Получение детальной информации о конкретном VPN устройстве
      operationId: getDevice
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID устройства
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Информация об устройстве
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceInfo'
        '400':
          description: Неверный ID устройства
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Устройство не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Devices
      summary: Удалить устройство
      description: Планирование удаления VPN устройства (мягкое удаление)
      operationId: deleteDevice
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID устройства
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Устройство запланировано на удаление
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Device scheduled for deletion"
        '400':
          description: Ошибка удаления
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Устройство не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/devices/{id}/key:
    get:
      tags:
        - Devices
      summary: Получить ключ доступа к устройству
      description: Получение URL для подключения к VPN устройству
      operationId: getDeviceKey
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID устройства
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Ключ доступа
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_url:
                    type: string
                    description: URL для подключения к VPN
                    example: "ss://..."
        '400':
          description: Неверный ID устройства
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Устройство не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/devices/{id}/pay:
    post:
      tags:
        - Payments
      summary: Оплатить подписку устройства
      description: Инициация платежа для продления подписки VPN устройства
      operationId: payDevice
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID устройства
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
            examples:
              payment:
                summary: Платеж на 3 месяца
                value:
                  device_id: 1
                  months: 3
      responses:
        '200':
          description: Ссылка на оплату
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
              examples:
                paymentUrl:
                  summary: Ссылка на оплату
                  value:
                    payment_url: "https://auth.robokassa.ru/..."
        '400':
          description: Ошибка создания платежа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Устройство не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/payments/robokassa/result:
    post:
      tags:
        - Webhooks
      summary: Webhook результата платежа Робокасса
      description: |
        Обработка результата платежа от Робокассы.
        Поддерживает как POST, так и GET запросы.
        Возвращает ответ в формате "OK{InvId}" как требует Робокасса.
      operationId: robokassaWebhook
      parameters:
        - name: OutSum
          in: query
          description: Сумма платежа
          schema:
            type: string
        - name: InvId
          in: query
          description: ID инвойса
          schema:
            type: string
        - name: SignatureValue
          in: query
          description: Подпись платежа
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                OutSum:
                  type: string
                  description: Сумма платежа
                InvId:
                  type: string
                  description: ID инвойса
                SignatureValue:
                  type: string
                  description: Подпись платежа
      responses:
        '200':
          description: Платеж обработан успешно
          content:
            text/plain:
              schema:
                type: string
                example: "OK123"
        '400':
          description: Ошибка обработки платежа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingParams:
                  summary: Отсутствуют параметры
                  value:
                    error: "Missing required parameters"
                    code: "MISSING_PARAMS"
                invalidInvoice:
                  summary: Неверный ID инвойса
                  value:
                    error: "Invalid invoice ID"
                    code: "INVALID_INVOICE_ID"
                processingError:
                  summary: Ошибка обработки
                  value:
                    error: "Payment processing failed"
                    code: "PAYMENT_PROCESSING_ERROR"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT токен для аутентификации.
        Передавайте токен в заголовке Authorization: Bearer <token>

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - pass
      properties:
        email:
          type: string
          format: email
          description: Email пользователя
          example: "user@example.com"
        pass:
          type: string
          minLength: 8
          description: Пароль пользователя
          example: "password123"
        otp:
          type: string
          description: OTP токен для MFA (если включен)
          example: "123456"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT токен для аутентификации
          example: "token_123_1234567890"
        user:
          $ref: '#/components/schemas/UserInfo'
        expires_at:
          type: string
          format: date-time
          description: Время истечения токена
          example: "2024-01-01T01:00:00Z"

    RegisterRequest:
      type: object
      required:
        - email
        - pass
      properties:
        email:
          type: string
          format: email
          description: Email для регистрации
          example: "newuser@example.com"
        pass:
          type: string
          minLength: 8
          description: Пароль для регистрации
          example: "password123"

    RegisterResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserInfo'
        mfa_secret:
          type: string
          description: Секрет для настройки MFA
          example: "JBSWY3DPEHPK3PXP"
        qr_url:
          type: string
          description: URL для генерации QR кода MFA
          example: "otpauth://totp/VPNService:newuser@example.com?secret=JBSWY3DPEHPK3PXP&issuer=VPNService"

    UserInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный ID пользователя
          example: 123
        email:
          type: string
          format: email
          description: Email пользователя
          example: "user@example.com"
        telegram_id:
          type: integer
          format: int64
          nullable: true
          description: ID пользователя в Telegram
          example: 456789
        telegram_username:
          type: string
          nullable: true
          description: Username пользователя в Telegram
          example: "username"
        ip_address:
          type: string
          nullable: true
          description: Последний известный IP адрес
          example: "192.168.1.1"
        created_at:
          type: string
          format: date-time
          description: Дата создания аккаунта
          example: "2024-01-01T00:00:00Z"

    DeviceInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный ID устройства
          example: 1
        name:
          type: string
          description: Название устройства
          example: "Device 01-02 15:04"
        status:
          type: string
          enum: [active, pending_delete, deactivated, deleted]
          description: Статус устройства
          example: "active"
        access_url:
          type: string
          description: URL для подключения к VPN
          example: "ss://..."
        created_at:
          type: string
          format: date-time
          description: Дата создания устройства
          example: "2024-01-01T00:00:00Z"
        scheduled_delete_at:
          type: string
          format: date-time
          nullable: true
          description: Дата запланированного удаления
          example: "2024-01-08T00:00:00Z"
        subscription:
          $ref: '#/components/schemas/SubscriptionInfo'

    SubscriptionInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный ID подписки
          example: 1
        expires_at:
          type: string
          format: date-time
          description: Дата истечения подписки
          example: "2024-02-01T00:00:00Z"
        status:
          type: string
          enum: [active, expired, canceled]
          description: Статус подписки
          example: "active"

    AddDeviceResponse:
      type: object
      properties:
        device:
          $ref: '#/components/schemas/DeviceInfo'
        subscription:
          $ref: '#/components/schemas/SubscriptionInfo'

    PaymentRequest:
      type: object
      required:
        - device_id
        - months
      properties:
        device_id:
          type: integer
          format: int64
          description: ID устройства для оплаты
          example: 1
        months:
          type: integer
          minimum: 1
          maximum: 12
          description: Количество месяцев подписки
          example: 3

    PaymentResponse:
      type: object
      properties:
        payment_url:
          type: string
          description: URL для перехода к оплате
          example: "https://auth.robokassa.ru/..."

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Описание ошибки
          example: "Invalid request format"
        code:
          type: string
          description: Код ошибки для программной обработки
          example: "INVALID_REQUEST"
        details:
          type: string
          description: Дополнительные детали ошибки
          example: "Field 'email' is required"

  examples:
    UserExample:
      summary: Пример пользователя
      value:
        id: 123
        email: "user@example.com"
        telegram_id: 456789
        telegram_username: "username"
        ip_address: "192.168.1.1"
        created_at: "2024-01-01T00:00:00Z"

    DeviceExample:
      summary: Пример устройства
      value:
        id: 1
        name: "Device 01-02 15:04"
        status: "active"
        access_url: "ss://..."
        created_at: "2024-01-01T00:00:00Z"
        subscription:
          id: 1
          expires_at: "2024-02-01T00:00:00Z"
          status: "active"

    ErrorExample:
      summary: Пример ошибки
      value:
        error: "Invalid request format"
        code: "INVALID_REQUEST"
        details: "Field 'email' is required"

externalDocs:
  description: Дополнительная документация
  url: https://github.com/your-repo/vpn-bot
